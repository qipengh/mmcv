library "cambricon-pipe-lib@master"

cnpipe {
    checkUTReport false
    checkMRUpvotes false
    uploadTestResult 'master', false
    if (env.gitlabTargetBranch == "jenkins") {
        task('cloneAnotherBranch', cloneAnotherBranch())
    }
    // 获取torch1.9 daily docker
    def docker_image = package.properties("http://daily.software.cambricon.com/daily/pytorch/docker/catch_1.9_develop/ubuntu18.04/3.7/latest").get("docker")
    if (this.DOCKER_IMAGE) {
        docker_image = this.DOCKER_IMAGE
    }
    // 运行单元测试
    if (env.gitlabTargetBranch == "main") {
        task('run_unit_test_main', unit_test(docker_image, "main"))
    }
    else if (env.gitlabTargetBranch == "1.x") {
        task('run_unit_test_1.x', unit_test(docker_image, "1.x"))
    } else {
        task('run_unit_test_main', unit_test(docker_image, "main"))
        task('run_unit_test_1.x', unit_test(docker_image, "1.x"))
    }
}

def cloneAnotherBranch() {
    return {
        stage "clone"
        runOnCloud true  // 在k8s上测试
        stash "mmcv","mmcv"
        resReq {
            reqCpu 1
            lmtCpu 1
            reqMemory '1Gi'
            lmtMemory '2Gi'
        }
        script '''
        git clone ssh://git@gitlab.software.cambricon.com:2289/neuware/software/framework/openmmlab/mmcv.git -b main 
        '''
    }
}

def unit_test(docker_image, branch_name) {
    return {
        stage 'test_mmcv_ops'
        timeout 120
        if (this.NODE_LABEL) {
            // 线下机
            runOnCloud false
            node {
                label this.NODE_LABEL
            }
            container {
                image docker_image
                runArgs '--shm-size 64G --network=host --privileged --device /dev/cambricon_dev0 --device /dev/cambricon_ctl -v /usr/bin/cnmon:/usr/bin/cnmon'
            }
        } else {
            // 云平台
            node {
                cardType this.CARD_TYPE.split(',')
                drvVer this.DRIVER_VERSION
            }
            container {
                image docker_image
            }
            resReq {
                reqMlus 1
                lmtMlus 1
                reqCpu 40
                lmtCpu 40
                reqMemory '40Gi'
                lmtMemory '40Gi'
                reqEphemeralStorage '96Gi'
                lmtEphemeralStorage '96Gi'
                modifyShm true
            }
        }
        envVariable 'BRANCH_NAME', branch_name
        if (env.gitlabTargetBranch == "jenkins") {
            envVariable 'MLU_TEST_BRANCH', env.gitlabSourceBranch
            unstash "mmcv"
        } else {
            envVariable 'MLU_TEST_BRANCH', "jenkins"
            envVariable 'MLU_SOURCE_BRANCH', env.gitlabSourceBranch
            unstash 'CI_MR_PROJ'
        }
        script '''
            set -e
            set -x
            sed -i '/douban/d' /root/.config/pip/pip.conf
            pushd /tmp
                git clone http://${NAME}:${TOKEN}@gitlab.software.cambricon.com/neuware/software/framework/openmmlab/mmcv.git -b ${MLU_TEST_BRANCH}
            popd
            pushd mmcv
                if [[ ${BRANCH_NAME} == "1.x" ]]
                then
                    git checkout 1.x
                else
                    git checkout main
                fi
                if [[ ${MLU_TEST_BRANCH} == "jenkins" ]]
                then
                    git checkout $MLU_SOURCE_BRANCH 
                fi
                cp -r /tmp/mmcv/tests/test_mlu_ops/ tests/
                source /torch/venv3/pytorch/bin/activate
                MMCV_WITH_OPS=1 pip install -e .
                pip install -r requirements/test.txt
                pip install attrs==19.1.0
                pip install pytest==4.1.0
                pytest -s tests/test_ops tests/test_mlu_ops --disable-warnings --resultlog=${CI_WORK_DIR}/test_log/test_ops_log.txt --junitxml=${CI_WORK_DIR}/test_result/test_mmcv_unit_test.xml
            popd
            mkdir dmesg_log
            RESULT=$?
            if [[${RESULT} != "0"]]; then
                # 存储dmesg信息
                echo "================= saved dmesg ================="
                dmesg -T > ${CI_WORK_DIR}/dmesg_log/dmesg.log
            fi
        '''
        stash 'dmesg_log','dmesg_log'
        archiveLog 'test_log'
        junitXml 'test_result'
    }
}
